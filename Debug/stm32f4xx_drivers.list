
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000640  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000804  0800080c  0001080c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000804  08000804  0001080c  2**0
                  CONTENTS
  4 .ARM          00000000  08000804  08000804  0001080c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000804  0800080c  0001080c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000804  08000804  00010804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000808  08000808  00010808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001080c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000000  0800080c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  0800080c  00020040  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0001080c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010836  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000b77  00000000  00000000  00010879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002fc  00000000  00000000  000113f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b0  00000000  00000000  000116f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000007a  00000000  00000000  000117a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000124f  00000000  00000000  0001181a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000b95  00000000  00000000  00012a69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004956  00000000  00000000  000135fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000001ec  00000000  00000000  00017f54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00018140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080007ec 	.word	0x080007ec

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080007ec 	.word	0x080007ec

08000204 <GPIO_ClkCtrl>:
/* include generico que contiene todas las definciones */

#include "stm32f446xx_gpio.h"

void GPIO_ClkCtrl(GPIO_RegDef_t *pGPIOx, uint8_t status)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	460b      	mov	r3, r1
 800020e:	70fb      	strb	r3, [r7, #3]
	if(status == ENABLE){
 8000210:	78fb      	ldrb	r3, [r7, #3]
 8000212:	2b01      	cmp	r3, #1
 8000214:	d157      	bne.n	80002c6 <GPIO_ClkCtrl+0xc2>
		if(pGPIOx == GPIOA)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a5a      	ldr	r2, [pc, #360]	; (8000384 <GPIO_ClkCtrl+0x180>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d106      	bne.n	800022c <GPIO_ClkCtrl+0x28>
			GPIOA_EN_CLK();
 800021e:	4b5a      	ldr	r3, [pc, #360]	; (8000388 <GPIO_ClkCtrl+0x184>)
 8000220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000222:	4a59      	ldr	r2, [pc, #356]	; (8000388 <GPIO_ClkCtrl+0x184>)
 8000224:	f043 0301 	orr.w	r3, r3, #1
 8000228:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOG)
			GPIOG_DIS_CLK();
		else if(pGPIOx == GPIOH)
			GPIOH_DIS_CLK();
	}
}
 800022a:	e0a6      	b.n	800037a <GPIO_ClkCtrl+0x176>
		else if(pGPIOx == GPIOB)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4a57      	ldr	r2, [pc, #348]	; (800038c <GPIO_ClkCtrl+0x188>)
 8000230:	4293      	cmp	r3, r2
 8000232:	d106      	bne.n	8000242 <GPIO_ClkCtrl+0x3e>
			GPIOB_EN_CLK();
 8000234:	4b54      	ldr	r3, [pc, #336]	; (8000388 <GPIO_ClkCtrl+0x184>)
 8000236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000238:	4a53      	ldr	r2, [pc, #332]	; (8000388 <GPIO_ClkCtrl+0x184>)
 800023a:	f043 0302 	orr.w	r3, r3, #2
 800023e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000240:	e09b      	b.n	800037a <GPIO_ClkCtrl+0x176>
		else if(pGPIOx == GPIOC)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4a52      	ldr	r2, [pc, #328]	; (8000390 <GPIO_ClkCtrl+0x18c>)
 8000246:	4293      	cmp	r3, r2
 8000248:	d106      	bne.n	8000258 <GPIO_ClkCtrl+0x54>
			GPIOC_EN_CLK();
 800024a:	4b4f      	ldr	r3, [pc, #316]	; (8000388 <GPIO_ClkCtrl+0x184>)
 800024c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800024e:	4a4e      	ldr	r2, [pc, #312]	; (8000388 <GPIO_ClkCtrl+0x184>)
 8000250:	f043 0304 	orr.w	r3, r3, #4
 8000254:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000256:	e090      	b.n	800037a <GPIO_ClkCtrl+0x176>
		else if(pGPIOx == GPIOD)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4a4e      	ldr	r2, [pc, #312]	; (8000394 <GPIO_ClkCtrl+0x190>)
 800025c:	4293      	cmp	r3, r2
 800025e:	d106      	bne.n	800026e <GPIO_ClkCtrl+0x6a>
			GPIOD_EN_CLK();
 8000260:	4b49      	ldr	r3, [pc, #292]	; (8000388 <GPIO_ClkCtrl+0x184>)
 8000262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000264:	4a48      	ldr	r2, [pc, #288]	; (8000388 <GPIO_ClkCtrl+0x184>)
 8000266:	f043 0308 	orr.w	r3, r3, #8
 800026a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800026c:	e085      	b.n	800037a <GPIO_ClkCtrl+0x176>
		else if(pGPIOx == GPIOE)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	4a49      	ldr	r2, [pc, #292]	; (8000398 <GPIO_ClkCtrl+0x194>)
 8000272:	4293      	cmp	r3, r2
 8000274:	d106      	bne.n	8000284 <GPIO_ClkCtrl+0x80>
			GPIOE_EN_CLK();
 8000276:	4b44      	ldr	r3, [pc, #272]	; (8000388 <GPIO_ClkCtrl+0x184>)
 8000278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800027a:	4a43      	ldr	r2, [pc, #268]	; (8000388 <GPIO_ClkCtrl+0x184>)
 800027c:	f043 0310 	orr.w	r3, r3, #16
 8000280:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000282:	e07a      	b.n	800037a <GPIO_ClkCtrl+0x176>
		else if(pGPIOx == GPIOF)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	4a45      	ldr	r2, [pc, #276]	; (800039c <GPIO_ClkCtrl+0x198>)
 8000288:	4293      	cmp	r3, r2
 800028a:	d106      	bne.n	800029a <GPIO_ClkCtrl+0x96>
			GPIOF_EN_CLK();
 800028c:	4b3e      	ldr	r3, [pc, #248]	; (8000388 <GPIO_ClkCtrl+0x184>)
 800028e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000290:	4a3d      	ldr	r2, [pc, #244]	; (8000388 <GPIO_ClkCtrl+0x184>)
 8000292:	f043 0320 	orr.w	r3, r3, #32
 8000296:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000298:	e06f      	b.n	800037a <GPIO_ClkCtrl+0x176>
		else if(pGPIOx == GPIOG)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	4a40      	ldr	r2, [pc, #256]	; (80003a0 <GPIO_ClkCtrl+0x19c>)
 800029e:	4293      	cmp	r3, r2
 80002a0:	d106      	bne.n	80002b0 <GPIO_ClkCtrl+0xac>
			GPIOG_EN_CLK();
 80002a2:	4b39      	ldr	r3, [pc, #228]	; (8000388 <GPIO_ClkCtrl+0x184>)
 80002a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a6:	4a38      	ldr	r2, [pc, #224]	; (8000388 <GPIO_ClkCtrl+0x184>)
 80002a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ae:	e064      	b.n	800037a <GPIO_ClkCtrl+0x176>
		else if(pGPIOx == GPIOH)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	4a3c      	ldr	r2, [pc, #240]	; (80003a4 <GPIO_ClkCtrl+0x1a0>)
 80002b4:	4293      	cmp	r3, r2
 80002b6:	d160      	bne.n	800037a <GPIO_ClkCtrl+0x176>
			GPIOH_EN_CLK();
 80002b8:	4b33      	ldr	r3, [pc, #204]	; (8000388 <GPIO_ClkCtrl+0x184>)
 80002ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002bc:	4a32      	ldr	r2, [pc, #200]	; (8000388 <GPIO_ClkCtrl+0x184>)
 80002be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002c4:	e059      	b.n	800037a <GPIO_ClkCtrl+0x176>
	}else if(status == DISABLE){
 80002c6:	78fb      	ldrb	r3, [r7, #3]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d156      	bne.n	800037a <GPIO_ClkCtrl+0x176>
		if(pGPIOx == GPIOA)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	4a2d      	ldr	r2, [pc, #180]	; (8000384 <GPIO_ClkCtrl+0x180>)
 80002d0:	4293      	cmp	r3, r2
 80002d2:	d106      	bne.n	80002e2 <GPIO_ClkCtrl+0xde>
			GPIOA_DIS_CLK();
 80002d4:	4b2c      	ldr	r3, [pc, #176]	; (8000388 <GPIO_ClkCtrl+0x184>)
 80002d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d8:	4a2b      	ldr	r2, [pc, #172]	; (8000388 <GPIO_ClkCtrl+0x184>)
 80002da:	f023 0301 	bic.w	r3, r3, #1
 80002de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002e0:	e04b      	b.n	800037a <GPIO_ClkCtrl+0x176>
		else if(pGPIOx == GPIOB)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	4a29      	ldr	r2, [pc, #164]	; (800038c <GPIO_ClkCtrl+0x188>)
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d106      	bne.n	80002f8 <GPIO_ClkCtrl+0xf4>
			GPIOB_DIS_CLK();
 80002ea:	4b27      	ldr	r3, [pc, #156]	; (8000388 <GPIO_ClkCtrl+0x184>)
 80002ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ee:	4a26      	ldr	r2, [pc, #152]	; (8000388 <GPIO_ClkCtrl+0x184>)
 80002f0:	f023 0302 	bic.w	r3, r3, #2
 80002f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002f6:	e040      	b.n	800037a <GPIO_ClkCtrl+0x176>
		else if(pGPIOx == GPIOC)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4a25      	ldr	r2, [pc, #148]	; (8000390 <GPIO_ClkCtrl+0x18c>)
 80002fc:	4293      	cmp	r3, r2
 80002fe:	d106      	bne.n	800030e <GPIO_ClkCtrl+0x10a>
			GPIOC_DIS_CLK();
 8000300:	4b21      	ldr	r3, [pc, #132]	; (8000388 <GPIO_ClkCtrl+0x184>)
 8000302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000304:	4a20      	ldr	r2, [pc, #128]	; (8000388 <GPIO_ClkCtrl+0x184>)
 8000306:	f023 0304 	bic.w	r3, r3, #4
 800030a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800030c:	e035      	b.n	800037a <GPIO_ClkCtrl+0x176>
		else if(pGPIOx == GPIOD)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	4a20      	ldr	r2, [pc, #128]	; (8000394 <GPIO_ClkCtrl+0x190>)
 8000312:	4293      	cmp	r3, r2
 8000314:	d106      	bne.n	8000324 <GPIO_ClkCtrl+0x120>
			GPIOD_DIS_CLK();
 8000316:	4b1c      	ldr	r3, [pc, #112]	; (8000388 <GPIO_ClkCtrl+0x184>)
 8000318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800031a:	4a1b      	ldr	r2, [pc, #108]	; (8000388 <GPIO_ClkCtrl+0x184>)
 800031c:	f023 0308 	bic.w	r3, r3, #8
 8000320:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000322:	e02a      	b.n	800037a <GPIO_ClkCtrl+0x176>
		else if(pGPIOx == GPIOE)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	4a1c      	ldr	r2, [pc, #112]	; (8000398 <GPIO_ClkCtrl+0x194>)
 8000328:	4293      	cmp	r3, r2
 800032a:	d106      	bne.n	800033a <GPIO_ClkCtrl+0x136>
			GPIOE_DIS_CLK();
 800032c:	4b16      	ldr	r3, [pc, #88]	; (8000388 <GPIO_ClkCtrl+0x184>)
 800032e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000330:	4a15      	ldr	r2, [pc, #84]	; (8000388 <GPIO_ClkCtrl+0x184>)
 8000332:	f023 0310 	bic.w	r3, r3, #16
 8000336:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000338:	e01f      	b.n	800037a <GPIO_ClkCtrl+0x176>
		else if(pGPIOx == GPIOF)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4a17      	ldr	r2, [pc, #92]	; (800039c <GPIO_ClkCtrl+0x198>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d106      	bne.n	8000350 <GPIO_ClkCtrl+0x14c>
			GPIOF_DIS_CLK();
 8000342:	4b11      	ldr	r3, [pc, #68]	; (8000388 <GPIO_ClkCtrl+0x184>)
 8000344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000346:	4a10      	ldr	r2, [pc, #64]	; (8000388 <GPIO_ClkCtrl+0x184>)
 8000348:	f023 0320 	bic.w	r3, r3, #32
 800034c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800034e:	e014      	b.n	800037a <GPIO_ClkCtrl+0x176>
		else if(pGPIOx == GPIOG)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	4a13      	ldr	r2, [pc, #76]	; (80003a0 <GPIO_ClkCtrl+0x19c>)
 8000354:	4293      	cmp	r3, r2
 8000356:	d106      	bne.n	8000366 <GPIO_ClkCtrl+0x162>
			GPIOG_DIS_CLK();
 8000358:	4b0b      	ldr	r3, [pc, #44]	; (8000388 <GPIO_ClkCtrl+0x184>)
 800035a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035c:	4a0a      	ldr	r2, [pc, #40]	; (8000388 <GPIO_ClkCtrl+0x184>)
 800035e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000362:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000364:	e009      	b.n	800037a <GPIO_ClkCtrl+0x176>
		else if(pGPIOx == GPIOH)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4a0e      	ldr	r2, [pc, #56]	; (80003a4 <GPIO_ClkCtrl+0x1a0>)
 800036a:	4293      	cmp	r3, r2
 800036c:	d105      	bne.n	800037a <GPIO_ClkCtrl+0x176>
			GPIOH_DIS_CLK();
 800036e:	4b06      	ldr	r3, [pc, #24]	; (8000388 <GPIO_ClkCtrl+0x184>)
 8000370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000372:	4a05      	ldr	r2, [pc, #20]	; (8000388 <GPIO_ClkCtrl+0x184>)
 8000374:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000378:	6313      	str	r3, [r2, #48]	; 0x30
}
 800037a:	bf00      	nop
 800037c:	370c      	adds	r7, #12
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr
 8000384:	40020000 	.word	0x40020000
 8000388:	40023800 	.word	0x40023800
 800038c:	40020400 	.word	0x40020400
 8000390:	40020800 	.word	0x40020800
 8000394:	40020c00 	.word	0x40020c00
 8000398:	40021000 	.word	0x40021000
 800039c:	40021400 	.word	0x40021400
 80003a0:	40021800 	.word	0x40021800
 80003a4:	40021c00 	.word	0x40021c00

080003a8 <GPIO_Init>:

// Estudiar esta funcion a profundidad

void GPIO_Init(GPIO_handle_t *pGPIOHandle)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b084      	sub	sp, #16
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	// 1. Habilitar clock
	GPIO_ClkCtrl(pGPIOHandle->pGPIOx, ENABLE);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2101      	movs	r1, #1
 80003b6:	4618      	mov	r0, r3
 80003b8:	f7ff ff24 	bl	8000204 <GPIO_ClkCtrl>

	// 2. Configurar modo (IN. OUT, AF ,AN,IT_RE, IT_FE, IT_RFE)
    pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (pGPIOHandle->GPIO_config.GPIO_Pin * 2));
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	681a      	ldr	r2, [r3, #0]
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	791b      	ldrb	r3, [r3, #4]
 80003c6:	005b      	lsls	r3, r3, #1
 80003c8:	2103      	movs	r1, #3
 80003ca:	fa01 f303 	lsl.w	r3, r1, r3
 80003ce:	43db      	mvns	r3, r3
 80003d0:	4619      	mov	r1, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	400a      	ands	r2, r1
 80003d8:	601a      	str	r2, [r3, #0]
	pGPIOHandle->pGPIOx->MODER |= (pGPIOHandle->GPIO_config.GPIO_Mode << (pGPIOHandle->GPIO_config.GPIO_Pin * 2));
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	681a      	ldr	r2, [r3, #0]
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	795b      	ldrb	r3, [r3, #5]
 80003e4:	4619      	mov	r1, r3
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	791b      	ldrb	r3, [r3, #4]
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	fa01 f303 	lsl.w	r3, r1, r3
 80003f0:	4619      	mov	r1, r3
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	430a      	orrs	r2, r1
 80003f8:	601a      	str	r2, [r3, #0]

	// 3. COnfigurar speed
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << (pGPIOHandle->GPIO_config.GPIO_Pin * 2));
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	689a      	ldr	r2, [r3, #8]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	791b      	ldrb	r3, [r3, #4]
 8000404:	005b      	lsls	r3, r3, #1
 8000406:	2103      	movs	r1, #3
 8000408:	fa01 f303 	lsl.w	r3, r1, r3
 800040c:	43db      	mvns	r3, r3
 800040e:	4619      	mov	r1, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	400a      	ands	r2, r1
 8000416:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= (pGPIOHandle->GPIO_config.GPIO_Speed << (pGPIOHandle->GPIO_config.GPIO_Pin * 2));
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	689a      	ldr	r2, [r3, #8]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	799b      	ldrb	r3, [r3, #6]
 8000422:	4619      	mov	r1, r3
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	791b      	ldrb	r3, [r3, #4]
 8000428:	005b      	lsls	r3, r3, #1
 800042a:	fa01 f303 	lsl.w	r3, r1, r3
 800042e:	4619      	mov	r1, r3
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	430a      	orrs	r2, r1
 8000436:	609a      	str	r2, [r3, #8]

	// 4. Configurar pull-up/pull-down
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (pGPIOHandle->GPIO_config.GPIO_Pin * 2));
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	68da      	ldr	r2, [r3, #12]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	791b      	ldrb	r3, [r3, #4]
 8000442:	005b      	lsls	r3, r3, #1
 8000444:	2103      	movs	r1, #3
 8000446:	fa01 f303 	lsl.w	r3, r1, r3
 800044a:	43db      	mvns	r3, r3
 800044c:	4619      	mov	r1, r3
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	400a      	ands	r2, r1
 8000454:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= (pGPIOHandle->GPIO_config.GPIO_PuPd << (pGPIOHandle->GPIO_config.GPIO_Pin * 2));
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	68da      	ldr	r2, [r3, #12]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	79db      	ldrb	r3, [r3, #7]
 8000460:	4619      	mov	r1, r3
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	791b      	ldrb	r3, [r3, #4]
 8000466:	005b      	lsls	r3, r3, #1
 8000468:	fa01 f303 	lsl.w	r3, r1, r3
 800046c:	4619      	mov	r1, r3
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	430a      	orrs	r2, r1
 8000474:	60da      	str	r2, [r3, #12]

	// 5. Configurar tipo de salida (Push-Pull/Open drain)
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x01 << pGPIOHandle->GPIO_config.GPIO_Pin);
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	685a      	ldr	r2, [r3, #4]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	791b      	ldrb	r3, [r3, #4]
 8000480:	4619      	mov	r1, r3
 8000482:	2301      	movs	r3, #1
 8000484:	408b      	lsls	r3, r1
 8000486:	43db      	mvns	r3, r3
 8000488:	4619      	mov	r1, r3
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	400a      	ands	r2, r1
 8000490:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= (pGPIOHandle->GPIO_config.GPIO_OType << pGPIOHandle->GPIO_config.GPIO_Pin);
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	685a      	ldr	r2, [r3, #4]
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	7a1b      	ldrb	r3, [r3, #8]
 800049c:	4619      	mov	r1, r3
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	791b      	ldrb	r3, [r3, #4]
 80004a2:	fa01 f303 	lsl.w	r3, r1, r3
 80004a6:	4619      	mov	r1, r3
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	430a      	orrs	r2, r1
 80004ae:	605a      	str	r2, [r3, #4]

	// 6. Configurar funcion alternativa
	if(pGPIOHandle->GPIO_config.GPIO_Mode == GPIO_Mode_AF){
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	795b      	ldrb	r3, [r3, #5]
 80004b4:	2b02      	cmp	r3, #2
 80004b6:	d131      	bne.n	800051c <GPIO_Init+0x174>
		uint8_t regidx;
		uint8_t blkidx;
		regidx = pGPIOHandle->GPIO_config.GPIO_Pin / 8;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	791b      	ldrb	r3, [r3, #4]
 80004bc:	08db      	lsrs	r3, r3, #3
 80004be:	73fb      	strb	r3, [r7, #15]
		blkidx = pGPIOHandle->GPIO_config.GPIO_Pin % 8;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	791b      	ldrb	r3, [r3, #4]
 80004c4:	f003 0307 	and.w	r3, r3, #7
 80004c8:	73bb      	strb	r3, [r7, #14]
		pGPIOHandle->pGPIOx->AFR[regidx] &= ~(0x0f << (blkidx * 4));
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	7bfa      	ldrb	r2, [r7, #15]
 80004d0:	3208      	adds	r2, #8
 80004d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80004d6:	7bbb      	ldrb	r3, [r7, #14]
 80004d8:	009b      	lsls	r3, r3, #2
 80004da:	220f      	movs	r2, #15
 80004dc:	fa02 f303 	lsl.w	r3, r2, r3
 80004e0:	43db      	mvns	r3, r3
 80004e2:	4618      	mov	r0, r3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	7bfa      	ldrb	r2, [r7, #15]
 80004ea:	4001      	ands	r1, r0
 80004ec:	3208      	adds	r2, #8
 80004ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[regidx] |= (pGPIOHandle->GPIO_config.GPIO_AltFun << (blkidx * 4));
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	7bfa      	ldrb	r2, [r7, #15]
 80004f8:	3208      	adds	r2, #8
 80004fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	7a5b      	ldrb	r3, [r3, #9]
 8000502:	461a      	mov	r2, r3
 8000504:	7bbb      	ldrb	r3, [r7, #14]
 8000506:	009b      	lsls	r3, r3, #2
 8000508:	fa02 f303 	lsl.w	r3, r2, r3
 800050c:	4618      	mov	r0, r3
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	7bfa      	ldrb	r2, [r7, #15]
 8000514:	4301      	orrs	r1, r0
 8000516:	3208      	adds	r2, #8
 8000518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800051c:	bf00      	nop
 800051e:	3710      	adds	r7, #16
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <GPIO_ReadPin>:
	else if(pGPIOx == GPIOH)
		GPIOH_RESET();
}

uint8_t GPIO_ReadPin(GPIO_RegDef_t *pGPIOx, GPIO_Pin_t pin)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	460b      	mov	r3, r1
 800052e:	70fb      	strb	r3, [r7, #3]
	return (uint8_t)((pGPIOx->IDR >> pin) & 0x01);
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	691a      	ldr	r2, [r3, #16]
 8000534:	78fb      	ldrb	r3, [r7, #3]
 8000536:	fa22 f303 	lsr.w	r3, r2, r3
 800053a:	b2db      	uxtb	r3, r3
 800053c:	f003 0301 	and.w	r3, r3, #1
 8000540:	b2db      	uxtb	r3, r3
}
 8000542:	4618      	mov	r0, r3
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr

0800054c <GPIO_WritePin>:
{
	return (uint16_t)(pGPIOx->IDR & 0xFFFF);
}

void GPIO_WritePin(GPIO_RegDef_t *pGPIOx, GPIO_Pin_t pin, uint8_t value)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	460b      	mov	r3, r1
 8000556:	70fb      	strb	r3, [r7, #3]
 8000558:	4613      	mov	r3, r2
 800055a:	70bb      	strb	r3, [r7, #2]
	if(value == SET){
 800055c:	78bb      	ldrb	r3, [r7, #2]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d109      	bne.n	8000576 <GPIO_WritePin+0x2a>
		pGPIOx->ODR |= (1 << pin);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	78fa      	ldrb	r2, [r7, #3]
 8000568:	2101      	movs	r1, #1
 800056a:	fa01 f202 	lsl.w	r2, r1, r2
 800056e:	431a      	orrs	r2, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	615a      	str	r2, [r3, #20]
	}else if(value == RESET){
		pGPIOx->ODR &= ~(1 << pin);
	}
}
 8000574:	e00c      	b.n	8000590 <GPIO_WritePin+0x44>
	}else if(value == RESET){
 8000576:	78bb      	ldrb	r3, [r7, #2]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d109      	bne.n	8000590 <GPIO_WritePin+0x44>
		pGPIOx->ODR &= ~(1 << pin);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	695b      	ldr	r3, [r3, #20]
 8000580:	78fa      	ldrb	r2, [r7, #3]
 8000582:	2101      	movs	r1, #1
 8000584:	fa01 f202 	lsl.w	r2, r1, r2
 8000588:	43d2      	mvns	r2, r2
 800058a:	401a      	ands	r2, r3
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	615a      	str	r2, [r3, #20]
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr

0800059a <GPIO_TogglePin>:
{
	pGPIOx->ODR = (uint32_t)value;
}

void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx, GPIO_Pin_t pin)
{
 800059a:	b480      	push	{r7}
 800059c:	b083      	sub	sp, #12
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
 80005a2:	460b      	mov	r3, r1
 80005a4:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << pin);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	78fa      	ldrb	r2, [r7, #3]
 80005ac:	2101      	movs	r1, #1
 80005ae:	fa01 f202 	lsl.w	r2, r1, r2
 80005b2:	405a      	eors	r2, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	615a      	str	r2, [r3, #20]
}
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr

080005c2 <delay>:

GPIO_handle_t LED;
GPIO_handle_t LED2;
GPIO_handle_t BUTTON;

void delay(uint32_t cnt){
 80005c2:	b480      	push	{r7}
 80005c4:	b083      	sub	sp, #12
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
	while(cnt)
 80005ca:	e002      	b.n	80005d2 <delay+0x10>
		cnt--;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	3b01      	subs	r3, #1
 80005d0:	607b      	str	r3, [r7, #4]
	while(cnt)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d1f9      	bne.n	80005cc <delay+0xa>
}
 80005d8:	bf00      	nop
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr

080005e4 <GPIO_LED_Init>:

void GPIO_LED_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	LED.pGPIOx = GPIOA;
 80005e8:	4b1e      	ldr	r3, [pc, #120]	; (8000664 <GPIO_LED_Init+0x80>)
 80005ea:	4a1f      	ldr	r2, [pc, #124]	; (8000668 <GPIO_LED_Init+0x84>)
 80005ec:	601a      	str	r2, [r3, #0]
	LED.GPIO_config.GPIO_Mode = GPIO_Mode_OUT;
 80005ee:	4b1d      	ldr	r3, [pc, #116]	; (8000664 <GPIO_LED_Init+0x80>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	715a      	strb	r2, [r3, #5]
	LED.GPIO_config.GPIO_OType = GPIO_OType_PP;
 80005f4:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <GPIO_LED_Init+0x80>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	721a      	strb	r2, [r3, #8]
	LED.GPIO_config.GPIO_Pin =	GPIO_PIN_6;
 80005fa:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <GPIO_LED_Init+0x80>)
 80005fc:	2206      	movs	r2, #6
 80005fe:	711a      	strb	r2, [r3, #4]
	LED.GPIO_config.GPIO_PuPd = GPIO_PuPd_NONE;
 8000600:	4b18      	ldr	r3, [pc, #96]	; (8000664 <GPIO_LED_Init+0x80>)
 8000602:	2200      	movs	r2, #0
 8000604:	71da      	strb	r2, [r3, #7]
	LED.GPIO_config.GPIO_Speed = GPIO_Speed_LOW;
 8000606:	4b17      	ldr	r3, [pc, #92]	; (8000664 <GPIO_LED_Init+0x80>)
 8000608:	2200      	movs	r2, #0
 800060a:	719a      	strb	r2, [r3, #6]

	GPIO_Init(&LED);
 800060c:	4815      	ldr	r0, [pc, #84]	; (8000664 <GPIO_LED_Init+0x80>)
 800060e:	f7ff fecb 	bl	80003a8 <GPIO_Init>

	LED2.pGPIOx = GPIOA;
 8000612:	4b16      	ldr	r3, [pc, #88]	; (800066c <GPIO_LED_Init+0x88>)
 8000614:	4a14      	ldr	r2, [pc, #80]	; (8000668 <GPIO_LED_Init+0x84>)
 8000616:	601a      	str	r2, [r3, #0]
	LED2.GPIO_config.GPIO_Mode = GPIO_Mode_OUT;
 8000618:	4b14      	ldr	r3, [pc, #80]	; (800066c <GPIO_LED_Init+0x88>)
 800061a:	2201      	movs	r2, #1
 800061c:	715a      	strb	r2, [r3, #5]
	LED2.GPIO_config.GPIO_OType = GPIO_OType_PP;
 800061e:	4b13      	ldr	r3, [pc, #76]	; (800066c <GPIO_LED_Init+0x88>)
 8000620:	2200      	movs	r2, #0
 8000622:	721a      	strb	r2, [r3, #8]
	LED2.GPIO_config.GPIO_Pin =	GPIO_PIN_5;
 8000624:	4b11      	ldr	r3, [pc, #68]	; (800066c <GPIO_LED_Init+0x88>)
 8000626:	2205      	movs	r2, #5
 8000628:	711a      	strb	r2, [r3, #4]
	LED2.GPIO_config.GPIO_PuPd = GPIO_PuPd_NONE;
 800062a:	4b10      	ldr	r3, [pc, #64]	; (800066c <GPIO_LED_Init+0x88>)
 800062c:	2200      	movs	r2, #0
 800062e:	71da      	strb	r2, [r3, #7]
	LED2.GPIO_config.GPIO_Speed = GPIO_Speed_LOW;
 8000630:	4b0e      	ldr	r3, [pc, #56]	; (800066c <GPIO_LED_Init+0x88>)
 8000632:	2200      	movs	r2, #0
 8000634:	719a      	strb	r2, [r3, #6]

	GPIO_Init(&LED2);
 8000636:	480d      	ldr	r0, [pc, #52]	; (800066c <GPIO_LED_Init+0x88>)
 8000638:	f7ff feb6 	bl	80003a8 <GPIO_Init>

	BUTTON.pGPIOx = GPIOC;
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <GPIO_LED_Init+0x8c>)
 800063e:	4a0d      	ldr	r2, [pc, #52]	; (8000674 <GPIO_LED_Init+0x90>)
 8000640:	601a      	str	r2, [r3, #0]
	BUTTON.GPIO_config.GPIO_Mode = GPIO_Mode_IN;
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <GPIO_LED_Init+0x8c>)
 8000644:	2200      	movs	r2, #0
 8000646:	715a      	strb	r2, [r3, #5]
	BUTTON.GPIO_config.GPIO_Pin =	GPIO_PIN_13;
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <GPIO_LED_Init+0x8c>)
 800064a:	220d      	movs	r2, #13
 800064c:	711a      	strb	r2, [r3, #4]
	BUTTON.GPIO_config.GPIO_PuPd = GPIO_PuPd_NONE;
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <GPIO_LED_Init+0x8c>)
 8000650:	2200      	movs	r2, #0
 8000652:	71da      	strb	r2, [r3, #7]
	BUTTON.GPIO_config.GPIO_Speed = GPIO_Speed_LOW;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <GPIO_LED_Init+0x8c>)
 8000656:	2200      	movs	r2, #0
 8000658:	719a      	strb	r2, [r3, #6]

	GPIO_Init(&BUTTON);
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <GPIO_LED_Init+0x8c>)
 800065c:	f7ff fea4 	bl	80003a8 <GPIO_Init>

}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	2000001c 	.word	0x2000001c
 8000668:	40020000 	.word	0x40020000
 800066c:	20000028 	.word	0x20000028
 8000670:	20000034 	.word	0x20000034
 8000674:	40020800 	.word	0x40020800

08000678 <main>:


int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
	GPIO_LED_Init();
 800067e:	f7ff ffb1 	bl	80005e4 <GPIO_LED_Init>
	

	while(1){

		uint8_t res = 1;
 8000682:	2301      	movs	r3, #1
 8000684:	71fb      	strb	r3, [r7, #7]

		GPIO_TogglePin(LED.pGPIOx, GPIO_PIN_6);
 8000686:	4b2d      	ldr	r3, [pc, #180]	; (800073c <main+0xc4>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2106      	movs	r1, #6
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ff84 	bl	800059a <GPIO_TogglePin>
		GPIO_TogglePin(LED.pGPIOx, GPIO_PIN_5);
 8000692:	4b2a      	ldr	r3, [pc, #168]	; (800073c <main+0xc4>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2105      	movs	r1, #5
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ff7e 	bl	800059a <GPIO_TogglePin>
		delay(2400000);
 800069e:	4828      	ldr	r0, [pc, #160]	; (8000740 <main+0xc8>)
 80006a0:	f7ff ff8f 	bl	80005c2 <delay>

		GPIO_WritePin(LED.pGPIOx, GPIO_PIN_6, RESET);
 80006a4:	4b25      	ldr	r3, [pc, #148]	; (800073c <main+0xc4>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2200      	movs	r2, #0
 80006aa:	2106      	movs	r1, #6
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ff4d 	bl	800054c <GPIO_WritePin>
		GPIO_TogglePin(LED.pGPIOx, GPIO_PIN_5);
 80006b2:	4b22      	ldr	r3, [pc, #136]	; (800073c <main+0xc4>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2105      	movs	r1, #5
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff ff6e 	bl	800059a <GPIO_TogglePin>
		delay(150000);
 80006be:	4821      	ldr	r0, [pc, #132]	; (8000744 <main+0xcc>)
 80006c0:	f7ff ff7f 	bl	80005c2 <delay>

		if(!GPIO_ReadPin(BUTTON.pGPIOx, GPIO_PIN_13)){
 80006c4:	4b20      	ldr	r3, [pc, #128]	; (8000748 <main+0xd0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	210d      	movs	r1, #13
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff ff2a 	bl	8000524 <GPIO_ReadPin>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d1d5      	bne.n	8000682 <main+0xa>

			while(res){
 80006d6:	e02d      	b.n	8000734 <main+0xbc>

				GPIO_TogglePin(LED.pGPIOx, GPIO_PIN_6);
 80006d8:	4b18      	ldr	r3, [pc, #96]	; (800073c <main+0xc4>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2106      	movs	r1, #6
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff ff5b 	bl	800059a <GPIO_TogglePin>
				GPIO_TogglePin(LED.pGPIOx, GPIO_PIN_5);
 80006e4:	4b15      	ldr	r3, [pc, #84]	; (800073c <main+0xc4>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2105      	movs	r1, #5
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff55 	bl	800059a <GPIO_TogglePin>
				delay(100000);
 80006f0:	4816      	ldr	r0, [pc, #88]	; (800074c <main+0xd4>)
 80006f2:	f7ff ff66 	bl	80005c2 <delay>

				GPIO_WritePin(LED.pGPIOx, GPIO_PIN_6, RESET);
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <main+0xc4>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2200      	movs	r2, #0
 80006fc:	2106      	movs	r1, #6
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ff24 	bl	800054c <GPIO_WritePin>
				GPIO_WritePin(LED.pGPIOx, GPIO_PIN_5, RESET);
 8000704:	4b0d      	ldr	r3, [pc, #52]	; (800073c <main+0xc4>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2200      	movs	r2, #0
 800070a:	2105      	movs	r1, #5
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ff1d 	bl	800054c <GPIO_WritePin>
				delay(100000);
 8000712:	480e      	ldr	r0, [pc, #56]	; (800074c <main+0xd4>)
 8000714:	f7ff ff55 	bl	80005c2 <delay>

				if(!GPIO_ReadPin(BUTTON.pGPIOx, GPIO_PIN_13))
 8000718:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <main+0xd0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	210d      	movs	r1, #13
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff00 	bl	8000524 <GPIO_ReadPin>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d102      	bne.n	8000730 <main+0xb8>
					res = 1;
 800072a:	2301      	movs	r3, #1
 800072c:	71fb      	strb	r3, [r7, #7]
 800072e:	e001      	b.n	8000734 <main+0xbc>
				else
					res = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	71fb      	strb	r3, [r7, #7]
			while(res){
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d1ce      	bne.n	80006d8 <main+0x60>
	while(1){
 800073a:	e7a2      	b.n	8000682 <main+0xa>
 800073c:	2000001c 	.word	0x2000001c
 8000740:	00249f00 	.word	0x00249f00
 8000744:	000249f0 	.word	0x000249f0
 8000748:	20000034 	.word	0x20000034
 800074c:	000186a0 	.word	0x000186a0

08000750 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000750:	480d      	ldr	r0, [pc, #52]	; (8000788 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000752:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000754:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000758:	480c      	ldr	r0, [pc, #48]	; (800078c <LoopForever+0x6>)
  ldr r1, =_edata
 800075a:	490d      	ldr	r1, [pc, #52]	; (8000790 <LoopForever+0xa>)
  ldr r2, =_sidata
 800075c:	4a0d      	ldr	r2, [pc, #52]	; (8000794 <LoopForever+0xe>)
  movs r3, #0
 800075e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000760:	e002      	b.n	8000768 <LoopCopyDataInit>

08000762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000766:	3304      	adds	r3, #4

08000768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800076a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800076c:	d3f9      	bcc.n	8000762 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800076e:	4a0a      	ldr	r2, [pc, #40]	; (8000798 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000770:	4c0a      	ldr	r4, [pc, #40]	; (800079c <LoopForever+0x16>)
  movs r3, #0
 8000772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000774:	e001      	b.n	800077a <LoopFillZerobss>

08000776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000778:	3204      	adds	r2, #4

0800077a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800077a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800077c:	d3fb      	bcc.n	8000776 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800077e:	f000 f811 	bl	80007a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000782:	f7ff ff79 	bl	8000678 <main>

08000786 <LoopForever>:

LoopForever:
  b LoopForever
 8000786:	e7fe      	b.n	8000786 <LoopForever>
  ldr   r0, =_estack
 8000788:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800078c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000790:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000794:	0800080c 	.word	0x0800080c
  ldr r2, =_sbss
 8000798:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800079c:	20000040 	.word	0x20000040

080007a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007a0:	e7fe      	b.n	80007a0 <ADC_IRQHandler>
	...

080007a4 <__libc_init_array>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	4d0d      	ldr	r5, [pc, #52]	; (80007dc <__libc_init_array+0x38>)
 80007a8:	4c0d      	ldr	r4, [pc, #52]	; (80007e0 <__libc_init_array+0x3c>)
 80007aa:	1b64      	subs	r4, r4, r5
 80007ac:	10a4      	asrs	r4, r4, #2
 80007ae:	2600      	movs	r6, #0
 80007b0:	42a6      	cmp	r6, r4
 80007b2:	d109      	bne.n	80007c8 <__libc_init_array+0x24>
 80007b4:	4d0b      	ldr	r5, [pc, #44]	; (80007e4 <__libc_init_array+0x40>)
 80007b6:	4c0c      	ldr	r4, [pc, #48]	; (80007e8 <__libc_init_array+0x44>)
 80007b8:	f000 f818 	bl	80007ec <_init>
 80007bc:	1b64      	subs	r4, r4, r5
 80007be:	10a4      	asrs	r4, r4, #2
 80007c0:	2600      	movs	r6, #0
 80007c2:	42a6      	cmp	r6, r4
 80007c4:	d105      	bne.n	80007d2 <__libc_init_array+0x2e>
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80007cc:	4798      	blx	r3
 80007ce:	3601      	adds	r6, #1
 80007d0:	e7ee      	b.n	80007b0 <__libc_init_array+0xc>
 80007d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80007d6:	4798      	blx	r3
 80007d8:	3601      	adds	r6, #1
 80007da:	e7f2      	b.n	80007c2 <__libc_init_array+0x1e>
 80007dc:	08000804 	.word	0x08000804
 80007e0:	08000804 	.word	0x08000804
 80007e4:	08000804 	.word	0x08000804
 80007e8:	08000808 	.word	0x08000808

080007ec <_init>:
 80007ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ee:	bf00      	nop
 80007f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007f2:	bc08      	pop	{r3}
 80007f4:	469e      	mov	lr, r3
 80007f6:	4770      	bx	lr

080007f8 <_fini>:
 80007f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007fa:	bf00      	nop
 80007fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007fe:	bc08      	pop	{r3}
 8000800:	469e      	mov	lr, r3
 8000802:	4770      	bx	lr
